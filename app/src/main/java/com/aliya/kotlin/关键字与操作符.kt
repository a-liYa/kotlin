package com.aliya.kotlin

/**
 * 关键字与操作符
 *
 * @author a_liYa
 * @date 2020/11/13 23:32.
 *
 */

// 硬关键字

/**
 * 以下符号会始终解释为关键字，不能用作标识符：
 * as
 *      -- 用于类型转换
 *      -- 为导入指定一个别名
 * as? 用于安全类型转换
 * break 终止循环的执行
 * class 声明一个类
 * continue 继续最近层循环的下一步
 * do 开始一个 do/while 循环（后置条件的循环）
 * else 定义一个 if 表达式条件为 false 时执行的分支
 * false 指定布尔类型的“假”值
 * for 开始一个 for 循环
 * fun 声明一个函数
 * if 开始一个 if 表达式
 * in
 *      -- 指定在 for 循环中迭代的对象
 *      -- 用作中缀操作符以检测一个值属于一个区间、 一个集合或者其他定义“contains”方法的实体
 *      -- 在 when 表达式中用于上述目的
 *      -- 将一个类型参数标记为逆变
 * !in
 *      -- 用作中缀操作符以检测一个值不属于一个区间、 一个集合或者其他定义“contains”方法的实体
 *      -- 在 when 表达式中用于上述目的
 * interface 声明一个接口
 * is
 *      -- 检测一个值具有指定类型
 *      -- 在 when 表达式中用于上述目的
 * !is
 *      -- 检测一个值不具有指定类型
 *      -- 在 when 表达式中用于上述目的
 * null 是表示不指向任何对象的对象引用的常量
 * object 同时声明一个类及其实例
 * package 指定当前文件的包
 * return 从最近层的函数或匿名函数返回
 * super
 *      -- 引用一个方法或属性的超类实现
 *      -- 在次构造函数中调用超类构造函数
 * this
 *      -- 引用当前接收者
 *      -- 在次构造函数中调用同一个类的另一个构造函数
 * throw 抛出一个异常
 * true 指定布尔类型的“真”值
 * try 开始一个异常处理块
 * typealias 声明一个类型别名
 * typeof 保留以供未来使用
 * val 声明一个只读属性或局部变量
 * var 声明一个可变属性或局部变量
 * when 开始一个 when 表达式（执行其中一个给定分支）
 * while 开始一个 while 循环（前置条件的循环）
 */